import os
import logging
import uuid
import asyncio
from sqlalchemy import (
    Column,
    Integer,
    String,
    DateTime,
    ForeignKey,
)
from sqlalchemy.future import select
from sqlalchemy.orm import relationship
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker, declarative_base
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import (
    ContentType,
    InputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
import redis.asyncio as redis
from dotenv import load_dotenv
from datetime import datetime, timezone
from contextlib import asynccontextmanager
from weasyprint import HTML

load_dotenv()

DEBUG_LEVEL = os.getenv("DEBUG_LEVEL").upper()

db_user = os.getenv("DB_USER")
db_password = os.getenv("DB_PASSWORD")
db_host = os.getenv("DB_HOST")
db_port = os.getenv("DB_PORT")
db_name = os.getenv("DB_NAME")

if db_password:
    DATABASE_URL = (
        f"postgresql+asyncpg://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
    )
else:
    DATABASE_URL = f"postgresql+asyncpg://{db_user}@{db_host}:{db_port}/{db_name}"

logging.basicConfig(level=getattr(logging, DEBUG_LEVEL, logging.INFO))
logger = logging.getLogger(__name__)

pool_size = int(os.getenv("DB_POOL_SIZE"))
max_overflow = int(os.getenv("DB_MAX_OVERFLOW"))

engine = create_async_engine(
    DATABASE_URL,
    echo=(DEBUG_LEVEL == "DEBUG"),
    pool_size=pool_size,
    max_overflow=max_overflow,
)

async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

Base = declarative_base()

bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher(bot)

if DEBUG_LEVEL == "DEBUG":
    from aiogram.contrib.middlewares.logging import LoggingMiddleware

    dp.middleware.setup(LoggingMiddleware())

redis_host = os.getenv("REDIS_HOST")
redis_port = int(os.getenv("REDIS_PORT"))
redis_password = os.getenv("REDIS_PASSWORD")
redis_db = int(os.getenv("REDIS_DB"))

if redis_password:
    redis_client = redis.Redis(
        host=redis_host,
        port=redis_port,
        password=redis_password,
        db=redis_db,
        decode_responses=True,
    )
else:
    redis_client = redis.Redis(
        host=redis_host,
        port=redis_port,
        db=redis_db,
        decode_responses=True,
    )


@asynccontextmanager
async def get_db_session():
    async with async_session() as session:
        yield session


async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)


async def on_startup(dispatcher):
    await init_db()


class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True)
    telegram_id = Column(Integer, unique=True, nullable=False)
    first_name = Column(String, nullable=True)
    last_name = Column(String, nullable=True)
    username = Column(String, nullable=True)
    available_audits = Column(Integer, default=0)
    audit_requests = relationship("AuditRequest", back_populates="user")


class AuditRequest(Base):
    __tablename__ = "audit_requests"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    file_name = Column(String, nullable=False)
    file_path = Column(String, nullable=False)
    report_path = Column(String, nullable=True)
    status = Column(String, default="queued")
    created_at = Column(DateTime, default=lambda: datetime.now(timezone.utc))
    updated_at = Column(
        DateTime,
        default=lambda: datetime.now(timezone.utc),
        onupdate=lambda: datetime.now(timezone.utc),
    )

    user = relationship("User", back_populates="audit_requests")


QUEUE_KEY = "audit_queue"


async def get_or_create_user(session: AsyncSession, message: types.Message) -> User:
    telegram_id = message.from_user.id
    user = await session.execute(select(User).where(User.telegram_id == telegram_id))
    user = user.scalars().first()
    if not user:
        user = User(
            telegram_id=telegram_id,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            username=message.from_user.username,
            available_audits=0,
        )
        session.add(user)
        await session.commit()
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}")
    return user


@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    async with get_db_session() as session:
        user = await get_or_create_user(session, message)
        await session.commit()

    user_first_name = message.from_user.first_name
    if user_first_name:
        await message.reply(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_first_name}! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å.\n\n"
            "–Ø –±–æ—Ç –¥–ª—è –∞—É–¥–∏—Ç–∞ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–∞ Solidity. üìÑüîç\n"
            "–¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ –º–Ω–æ–π:"
        )
    else:
        await message.reply(
            "üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å.\n\n"
            "–Ø –±–æ—Ç –¥–ª—è –∞—É–¥–∏—Ç–∞ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–∞ Solidity. üìÑüîç\n"
            "–¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ –º–Ω–æ–π:"
        )


@dp.message_handler(commands=["about"])
async def cmd_about(message: types.Message):
    await message.reply(
        "‚ÑπÔ∏è *–û –±–æ—Ç–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö:*\n\n"
        "üëã */start* - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.\n"
        "‚ÑπÔ∏è */about* - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞. üìö\n"
        "üìÑ */audit* - –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞. –î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º `.sol` –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π.\n"
        "üÜì */free* - –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞—É–¥–∏—Ç—ã (2 –∞—É–¥–∏—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π).\n"
        "üõí */buy {–∫–æ–ª-–≤–æ}* - –ö—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—É–¥–∏—Ç—ã.\n"
        "üìä */status* - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏—Ç–æ–≤.\n\n"
        "üí° *–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:*\n"
        "- –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–π–ª—ã —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–∞ Solidity (.sol) –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏—Ç–∞. üõ°Ô∏è\n"
        "- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞. ‚úîÔ∏è\n"
        "- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π HTML –∏ PDF –æ—Ç—á–µ—Ç—ã –ø–æ –∞—É–¥–∏—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. üìëüìù\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. üîÑ\n"
        "- –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥—å—é –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∞—É–¥–∏—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏. üïí\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –æ–±—Ä–∞—â–∞—Ç—å—Å—è! üòä",
        parse_mode=types.ParseMode.MARKDOWN,
    )


@dp.message_handler(commands=["free"])
async def cmd_free(message: types.Message):
    async with get_db_session() as session:
        user = await get_or_create_user(session, message)
        if user.available_audits == 0:
            user.available_audits += 2
            await session.commit()
            await message.reply(
                "üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞—É–¥–∏—Ç–∞! –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/audit`. üòä",
                parse_mode=types.ParseMode.MARKDOWN,
            )
        else:
            await message.reply(
                "üõë –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞—É–¥–∏—Ç—ã. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—É–¥–∏—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/buy {–∫–æ–ª-–≤–æ}`. üõí",
                parse_mode=types.ParseMode.MARKDOWN,
            )


@dp.message_handler(commands=["buy"])
async def cmd_buy(message: types.Message):
    args = message.get_args()
    if not args:
        await message.reply(
            "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–¥–∏—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å.\n"
            "–ü—Ä–∏–º–µ—Ä: `/buy 5`",
            parse_mode=types.ParseMode.MARKDOWN,
        )
        return

    try:
        quantity = int(args)
        if quantity <= 0:
            raise ValueError
    except ValueError:
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞—É–¥–∏—Ç–æ–≤.\n"
            "–ü—Ä–∏–º–µ—Ä: `/buy 5`",
            parse_mode=types.ParseMode.MARKDOWN,
        )
        return

    keyboard = InlineKeyboardMarkup(row_width=2)
    pay_button = InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url="https://www.google.com")
    check_button = InlineKeyboardButton(
        text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment:{quantity}"
    )
    keyboard.add(pay_button, check_button)

    await message.reply(
        f"üõí –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å {quantity} –∞—É–¥–∏—Ç–∞(–æ–≤).\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=keyboard,
    )


@dp.callback_query_handler(lambda c: c.data and c.data.startswith("check_payment:"))
async def callback_check_payment(callback_query: types.CallbackQuery):
    try:
        _, quantity_str = callback_query.data.split(":")
        quantity = int(quantity_str)
    except (IndexError, ValueError):
        await callback_query.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.", show_alert=True
        )
        return

    async with get_db_session() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == callback_query.from_user.id)
        )
        user = user.scalars().first()
        if not user:
            await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        user.available_audits += quantity
        await session.commit()

    await callback_query.answer(
        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞—à–∏ –∞—É–¥–∏—Ç—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã. üéâ", show_alert=True
    )
    await bot.send_message(
        callback_query.from_user.id,
        f"üéâ –í–∞–º —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ {quantity} –∞—É–¥–∏—Ç–∞(–æ–≤)! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ {user.available_audits} –∞—É–¥–∏—Ç–∞(–æ–≤).",
    )


@dp.message_handler(commands=["status"])
async def cmd_status(message: types.Message):
    async with get_db_session() as session:
        user = await get_or_create_user(session, message)
        await session.commit()

    await message.reply(
        f"üìä *–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:*\n"
        f"üî¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏—Ç—ã: {user.available_audits}\n"
        "üìà –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É `/audit`, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç –≤–∞—à–µ–≥–æ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.\n"
        "üõí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/buy {–∫–æ–ª-–≤–æ}`, —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—É–¥–∏—Ç—ã.\n"
        "üÜì –ò–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞—É–¥–∏—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/free`.",
        parse_mode=types.ParseMode.MARKDOWN,
    )


@dp.message_handler(commands=["audit"], content_types=ContentType.DOCUMENT)
async def cmd_audit(message: types.Message):
    document = message.document
    file_name = document.file_name
    file_extension = os.path.splitext(file_name)[1].lower()

    if file_extension != ".sol":
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º `.sol` –¥–ª—è –∞—É–¥–∏—Ç–∞ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞."
        )
        return

    async with get_db_session() as session:
        user = await get_or_create_user(session, message)
        if user.available_audits <= 0:
            await message.reply(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—É–¥–∏—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/buy {–∫–æ–ª-–≤–æ}` –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞—É–¥–∏—Ç—ã —Å –ø–æ–º–æ—â—å—é `/free`."
            )
            return

        user.available_audits -= 1

        unique_id = uuid.uuid4().hex
        uploads_dir = "uploads"
        reports_dir = "reports"
        os.makedirs(uploads_dir, exist_ok=True)
        os.makedirs(reports_dir, exist_ok=True)

        file_path = os.path.join(uploads_dir, f"{unique_id}.sol")
        report_html_path = os.path.join(reports_dir, f"{unique_id}_report.html")
        report_pdf_path = os.path.join(reports_dir, f"{unique_id}_report.pdf")

        audit_request = AuditRequest(
            user_id=user.id,
            file_name=file_name,
            file_path=file_path,
            report_path=report_html_path,
            status="queued",
        )
        session.add(audit_request)
        await session.commit()

        await redis_client.rpush(QUEUE_KEY, audit_request.id)

        queue_length = await redis_client.llen(QUEUE_KEY)
        position_in_queue = queue_length

    await message.reply(
        f"‚úÖ –í–∞—à —Ñ–∞–π–ª –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∞—É–¥–∏—Ç! üîç\n"
        f"üìã –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {position_in_queue}\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ. üïí"
    )


@dp.message_handler(commands=["audit"])
async def audit_no_file(message: types.Message):
    await message.reply(
        "‚ùóÔ∏è –î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º `.sol` –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /audit.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `/audit` –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∞—à —Ñ–∞–π–ª. üìÇ",
        parse_mode=types.ParseMode.MARKDOWN,
    )


async def process_audit_queue():
    while True:
        audit_request_id = await redis_client.lpop(QUEUE_KEY)
        if audit_request_id:
            async with get_db_session() as session:
                audit_request = await session.get(AuditRequest, int(audit_request_id))
                if audit_request and audit_request.status == "queued":
                    audit_request.status = "processing"
                    await session.commit()

                    user = await session.get(User, audit_request.user_id)
                    try:
                        await bot.send_message(
                            user.telegram_id,
                            f"üîÑ –ù–∞—á–∏–Ω–∞—é –∞—É–¥–∏—Ç –≤–∞—à–µ–≥–æ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {audit_request.file_name}",
                        )

                        file = await bot.get_file(audit_request.file_path)
                        downloaded_file = await bot.download_file(file.file_path)
                        with open(audit_request.file_path, "wb") as f:
                            f.write(downloaded_file.read())

                        html_content = generate_html_report(audit_request.file_name)
                        with open(
                            audit_request.report_path, "w", encoding="utf-8"
                        ) as report_file:
                            report_file.write(html_content)

                        try:
                            HTML(audit_request.report_path).write_pdf(
                                audit_request.report_path.replace(".html", ".pdf")
                            )
                            report_final_path = audit_request.report_path.replace(
                                ".html", ".pdf"
                            )
                        except Exception as pdf_error:
                            logger.error(
                                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ HTML –≤ PDF: {pdf_error}"
                            )
                            report_final_path = audit_request.report_path

                        await bot.send_document(
                            user.telegram_id,
                            InputFile(report_final_path),
                            caption="üìÑ –í–∞—à –æ—Ç—á–µ—Ç –ø–æ –∞—É–¥–∏—Ç—É —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≥–æ—Ç–æ–≤! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –Ω–∏–∂–µ.",
                        )

                        audit_request.status = "completed"
                        await session.commit()

                        try:
                            os.remove(audit_request.file_path)
                            os.remove(audit_request.report_path)
                            os.remove(report_final_path)
                        except Exception as cleanup_error:
                            logger.error(
                                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {cleanup_error}"
                            )

                        await bot.send_message(
                            user.telegram_id, "‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! üéâ"
                        )

                    except Exception as e:
                        logger.error(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∞ {audit_request.id}: {e}"
                        )
                        audit_request.status = "failed"
                        await session.commit()
                        await bot.send_message(
                            user.telegram_id,
                            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –∞—É–¥–∏—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        )
        else:
            await asyncio.sleep(5)


def generate_html_report(file_name: str) -> str:
    return f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <title>–û—Ç—á–µ—Ç –ø–æ –∞—É–¥–∏—Ç—É —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; }}
            h1, h2, h3 {{ color: #2E86C1; }}
            .page {{ page-break-after: always; }}
            .title-page {{ text-align: center; margin-top: 100px; }}
            .content {{ margin-top: 50px; }}
            .section {{ margin-bottom: 40px; }}
            ul {{ list-style-type: disc; margin-left: 20px; }}
        </style>
    </head>
    <body>
        <!-- –¢–∏—Ç—É–ª—å–Ω—ã–π –ª–∏—Å—Ç -->
        <div class="page title-page">
            <h1>–û—Ç—á–µ—Ç –ø–æ –∞—É–¥–∏—Ç—É —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞</h1>
            <p>–î–∞—Ç–∞: {datetime.now(timezone.utc).strftime('%d.%m.%Y')}</p>
            <p>–ö–æ–Ω—Ç—Ä–∞–∫—Ç: {file_name}</p>
        </div>

        <!-- –û –∫–æ–º–∞–Ω–¥–µ -->
        <div class="page content">
            <h2>–û –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ</h2>
            <p>–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ –æ–ø—ã—Ç–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–æ–≤, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏—Ö—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–∞ Solidity. üõ°Ô∏è</p>
            <p>–ù–∞—à–∞ –º–∏—Å—Å–∏—è ‚Äî –æ–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –±–ª–æ–∫—á–µ–π–Ω-–ø—Ä–æ–µ–∫—Ç–æ–≤. üöÄ</p>
            <p>–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞, –≤—ã—è–≤–ª–µ–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é. üß∞</p>
        </div>

        <!-- –¶–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏ –∞—É–¥–∏—Ç–∞ -->
        <div class="page content">
            <h2>–¶–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏ –∞—É–¥–∏—Ç–∞</h2>
            <p>–û—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ª–∏ –∞—É–¥–∏—Ç–∞ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:</p>
            <ul>
                <li>–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∏ –æ—à–∏–±–æ–∫ –≤ –∫–æ–¥–µ. üîç</li>
                <li>–û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞. üõ°Ô∏è</li>
                <li>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞. üìù</li>
                <li>–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. üìà</li>
            </ul>
        </div>

        <!-- –ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ -->
        <div class="page content">
            <h2>–ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>
            <p>–í —Ö–æ–¥–µ –∞—É–¥–∏—Ç–∞ –±—ã–ª–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:</p>
            <ul>
                <li>–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ reentrancy, integer overflow/underflow, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∏ –¥—Ä—É–≥–∏–µ. ‚ö†Ô∏è</li>
                <li>–û—Ü–µ–Ω–∫–∞ –ª–æ–≥–∏–∫–∏ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∏ –Ω–µ–¥–æ—á–µ—Ç–æ–≤ –≤ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ. üß†</li>
                <li>–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –≤–∫–ª—é—á–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. üìö</li>
                <li>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ —Ä—É—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫. üõ†Ô∏è</li>
            </ul>
            <p>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</p>
            <ul>
                <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ Solidity –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. üì¶</li>
                <li>–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π. ‚úÖ</li>
                <li>–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∞—É–¥–∏—Ç–æ–≤ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥. üîÑ</li>
                <li>–í–Ω–µ–¥—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∞—Ç–∞–∫. üìä</li>
            </ul>
        </div>

        <!-- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è -->
        <div class="page content">
            <h2>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è</h2>
            <p>–ú—ã –ø—Ä–æ–≤–µ–ª–∏ –æ–±—à–∏—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞, –≤–∫–ª—é—á–∞—è:</p>
            <ul>
                <li>–Æ–Ω–∏—Ç-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Solidity. üß™</li>
                <li>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –¥—Ä—É–≥–∏–º–∏ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏ –∏ —Å–∏—Å—Ç–µ–º–∞–º–∏. üîó</li>
                <li>–§–æ—Ä–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞. üìú</li>
                <li>–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ–¥ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π. üöÄ</li>
            </ul>
        </div>

        <!-- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º -->
        <div class="page content">
            <h2>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º</h2>
            <p>–ù–∞—à –∞—É–¥–∏—Ç –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å–ª–µ–¥—É—é—â–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º:</p>
            <ul>
                <li>ERC-20 –∏ ERC-721 —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å. ü™ô</li>
                <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ OpenZeppelin –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞. üõ°Ô∏è</li>
                <li>–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç Ethereum –∏ –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫—á–µ–π–Ω-—Å–æ–æ–±—â–µ—Å—Ç–≤. üìñ</li>
            </ul>
        </div>

        <!-- –ó–∞–∫–ª—é—á–µ–Ω–∏–µ -->
        <div class="page content">
            <h2>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h2>
            <p>–í–∞—à —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç –ø—Ä–æ—à–µ–ª —Ç—â–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π. üéâ</p>
            <p>–û–¥–Ω–∞–∫–æ, –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –æ–±—â–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–ª–µ–¥–æ–≤–∞—Ç—å –Ω–∞—à–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º. üõ†Ô∏è</p>
            <p>–ú—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–∞—à–∏–º —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º. ü§ù</p>
            <p>–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! üòä</p>
        </div>
    </body>
    </html>
    """


@dp.callback_query_handler(lambda c: c.data and c.data.startswith("check_payment:"))
async def callback_check_payment(callback_query: types.CallbackQuery):
    try:
        _, quantity_str = callback_query.data.split(":")
        quantity = int(quantity_str)
    except (IndexError, ValueError):
        await callback_query.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.", show_alert=True
        )
        return

    async with get_db_session() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == callback_query.from_user.id)
        )
        user = user.scalars().first()
        if not user:
            await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        user.available_audits += quantity
        await session.commit()

    await callback_query.answer(
        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞—à–∏ –∞—É–¥–∏—Ç—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã. üéâ", show_alert=True
    )
    await bot.send_message(
        callback_query.from_user.id,
        f"üéâ –í–∞–º —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ {quantity} –∞—É–¥–∏—Ç–∞(–æ–≤)! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ {user.available_audits} –∞—É–¥–∏—Ç–∞(–æ–≤).",
    )


@dp.message_handler(commands=["buy"])
async def cmd_buy(message: types.Message):
    args = message.get_args()
    if not args:
        await message.reply(
            "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–¥–∏—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å.\n"
            "–ü—Ä–∏–º–µ—Ä: `/buy 5`",
            parse_mode=types.ParseMode.MARKDOWN,
        )
        return

    try:
        quantity = int(args)
        if quantity <= 0:
            raise ValueError
    except ValueError:
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞—É–¥–∏—Ç–æ–≤.\n"
            "–ü—Ä–∏–º–µ—Ä: `/buy 5`",
            parse_mode=types.ParseMode.MARKDOWN,
        )
        return

    keyboard = InlineKeyboardMarkup(row_width=2)
    pay_button = InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url="https://www.google.com")
    check_button = InlineKeyboardButton(
        text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment:{quantity}"
    )
    keyboard.add(pay_button, check_button)

    await message.reply(
        f"üõí –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å {quantity} –∞—É–¥–∏—Ç–∞(–æ–≤).\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=keyboard,
    )


async def process_audit_queue():
    while True:
        audit_request_id = await redis_client.lpop(QUEUE_KEY)
        if audit_request_id:
            async with get_db_session() as session:
                audit_request = await session.get(AuditRequest, int(audit_request_id))
                if audit_request and audit_request.status == "queued":
                    audit_request.status = "processing"
                    await session.commit()

                    user = await session.get(User, audit_request.user_id)
                    try:
                        await bot.send_message(
                            user.telegram_id,
                            f"üîÑ –ù–∞—á–∏–Ω–∞—é –∞—É–¥–∏—Ç –≤–∞—à–µ–≥–æ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {audit_request.file_name}",
                        )

                        file = await bot.get_file(audit_request.file_path)
                        downloaded_file = await bot.download_file(file.file_path)
                        with open(audit_request.file_path, "wb") as f:
                            f.write(downloaded_file.read())

                        html_content = generate_html_report(audit_request.file_name)
                        with open(
                            audit_request.report_path, "w", encoding="utf-8"
                        ) as report_file:
                            report_file.write(html_content)

                        try:
                            HTML(audit_request.report_path).write_pdf(
                                audit_request.report_path.replace(".html", ".pdf")
                            )
                            report_final_path = audit_request.report_path.replace(
                                ".html", ".pdf"
                            )
                        except Exception as pdf_error:
                            logger.error(
                                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ HTML –≤ PDF: {pdf_error}"
                            )
                            report_final_path = audit_request.report_path

                        await bot.send_document(
                            user.telegram_id,
                            InputFile(report_final_path),
                            caption="üìÑ –í–∞—à –æ—Ç—á–µ—Ç –ø–æ –∞—É–¥–∏—Ç—É —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≥–æ—Ç–æ–≤! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –Ω–∏–∂–µ.",
                        )

                        audit_request.status = "completed"
                        await session.commit()

                        try:
                            os.remove(audit_request.file_path)
                            os.remove(audit_request.report_path)
                            os.remove(report_final_path)
                        except Exception as cleanup_error:
                            logger.error(
                                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {cleanup_error}"
                            )

                        await bot.send_message(
                            user.telegram_id, "‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! üéâ"
                        )

                    except Exception as e:
                        logger.error(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∞ {audit_request.id}: {e}"
                        )
                        audit_request.status = "failed"
                        await session.commit()
                        await bot.send_message(
                            user.telegram_id,
                            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –∞—É–¥–∏—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        )
        else:
            await asyncio.sleep(5)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
